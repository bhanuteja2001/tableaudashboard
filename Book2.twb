<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20202.20.0525.1210                               -->
<workbook original-version='18.1' source-build='2020.2.1 (20202.20.0525.1210)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <_.fcp.SetMembershipControl.true...SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='owid-covid-data' inline='true' name='federated.1bym01b0iougn81c5ygwy1xeqhst' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='owid-covid-data' name='textscan.097u17y0rmmo881gqzror05wg1bg'>
            <connection class='textscan' directory='E:/Spark Found' filename='owid-covid-data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.097u17y0rmmo881gqzror05wg1bg' name='owid-covid-data.csv' table='[owid-covid-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='iso_code' ordinal='0' />
            <column datatype='string' name='continent' ordinal='1' />
            <column datatype='string' name='location' ordinal='2' />
            <column datatype='date' name='date' ordinal='3' />
            <column datatype='real' name='total_cases' ordinal='4' />
            <column datatype='real' name='new_cases' ordinal='5' />
            <column datatype='real' name='new_cases_smoothed' ordinal='6' />
            <column datatype='real' name='total_deaths' ordinal='7' />
            <column datatype='real' name='new_deaths' ordinal='8' />
            <column datatype='real' name='new_deaths_smoothed' ordinal='9' />
            <column datatype='real' name='total_cases_per_million' ordinal='10' />
            <column datatype='real' name='new_cases_per_million' ordinal='11' />
            <column datatype='real' name='new_cases_smoothed_per_million' ordinal='12' />
            <column datatype='real' name='total_deaths_per_million' ordinal='13' />
            <column datatype='real' name='new_deaths_per_million' ordinal='14' />
            <column datatype='real' name='new_deaths_smoothed_per_million' ordinal='15' />
            <column datatype='string' name='new_tests' ordinal='16' />
            <column datatype='string' name='total_tests' ordinal='17' />
            <column datatype='string' name='total_tests_per_thousand' ordinal='18' />
            <column datatype='string' name='new_tests_per_thousand' ordinal='19' />
            <column datatype='string' name='new_tests_smoothed' ordinal='20' />
            <column datatype='string' name='new_tests_smoothed_per_thousand' ordinal='21' />
            <column datatype='string' name='tests_per_case' ordinal='22' />
            <column datatype='string' name='positive_rate' ordinal='23' />
            <column datatype='string' name='tests_units' ordinal='24' />
            <column datatype='real' name='stringency_index' ordinal='25' />
            <column datatype='real' name='population' ordinal='26' />
            <column datatype='real' name='population_density' ordinal='27' />
            <column datatype='real' name='median_age' ordinal='28' />
            <column datatype='real' name='aged_65_older' ordinal='29' />
            <column datatype='real' name='aged_70_older' ordinal='30' />
            <column datatype='real' name='gdp_per_capita' ordinal='31' />
            <column datatype='real' name='extreme_poverty' ordinal='32' />
            <column datatype='real' name='cardiovasc_death_rate' ordinal='33' />
            <column datatype='real' name='diabetes_prevalence' ordinal='34' />
            <column datatype='real' name='female_smokers' ordinal='35' />
            <column datatype='real' name='male_smokers' ordinal='36' />
            <column datatype='real' name='handwashing_facilities' ordinal='37' />
            <column datatype='real' name='hospital_beds_per_thousand' ordinal='38' />
            <column datatype='real' name='life_expectancy' ordinal='39' />
            <column datatype='real' name='human_development_index' ordinal='40' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.097u17y0rmmo881gqzror05wg1bg' name='owid-covid-data.csv' table='[owid-covid-data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='iso_code' ordinal='0' />
            <column datatype='string' name='continent' ordinal='1' />
            <column datatype='string' name='location' ordinal='2' />
            <column datatype='date' name='date' ordinal='3' />
            <column datatype='real' name='total_cases' ordinal='4' />
            <column datatype='real' name='new_cases' ordinal='5' />
            <column datatype='real' name='new_cases_smoothed' ordinal='6' />
            <column datatype='real' name='total_deaths' ordinal='7' />
            <column datatype='real' name='new_deaths' ordinal='8' />
            <column datatype='real' name='new_deaths_smoothed' ordinal='9' />
            <column datatype='real' name='total_cases_per_million' ordinal='10' />
            <column datatype='real' name='new_cases_per_million' ordinal='11' />
            <column datatype='real' name='new_cases_smoothed_per_million' ordinal='12' />
            <column datatype='real' name='total_deaths_per_million' ordinal='13' />
            <column datatype='real' name='new_deaths_per_million' ordinal='14' />
            <column datatype='real' name='new_deaths_smoothed_per_million' ordinal='15' />
            <column datatype='string' name='new_tests' ordinal='16' />
            <column datatype='string' name='total_tests' ordinal='17' />
            <column datatype='string' name='total_tests_per_thousand' ordinal='18' />
            <column datatype='string' name='new_tests_per_thousand' ordinal='19' />
            <column datatype='string' name='new_tests_smoothed' ordinal='20' />
            <column datatype='string' name='new_tests_smoothed_per_thousand' ordinal='21' />
            <column datatype='string' name='tests_per_case' ordinal='22' />
            <column datatype='string' name='positive_rate' ordinal='23' />
            <column datatype='string' name='tests_units' ordinal='24' />
            <column datatype='real' name='stringency_index' ordinal='25' />
            <column datatype='real' name='population' ordinal='26' />
            <column datatype='real' name='population_density' ordinal='27' />
            <column datatype='real' name='median_age' ordinal='28' />
            <column datatype='real' name='aged_65_older' ordinal='29' />
            <column datatype='real' name='aged_70_older' ordinal='30' />
            <column datatype='real' name='gdp_per_capita' ordinal='31' />
            <column datatype='real' name='extreme_poverty' ordinal='32' />
            <column datatype='real' name='cardiovasc_death_rate' ordinal='33' />
            <column datatype='real' name='diabetes_prevalence' ordinal='34' />
            <column datatype='real' name='female_smokers' ordinal='35' />
            <column datatype='real' name='male_smokers' ordinal='36' />
            <column datatype='real' name='handwashing_facilities' ordinal='37' />
            <column datatype='real' name='hospital_beds_per_thousand' ordinal='38' />
            <column datatype='real' name='life_expectancy' ordinal='39' />
            <column datatype='real' name='human_development_index' ordinal='40' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>iso_code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[iso_code]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>iso_code</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>continent</remote-name>
            <remote-type>129</remote-type>
            <local-name>[continent]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>continent</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_cases]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>total_cases</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_cases]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_cases</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_cases_smoothed</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_cases_smoothed]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_cases_smoothed</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_deaths]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>total_deaths</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_deaths]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_deaths</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_deaths_smoothed</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_deaths_smoothed]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_deaths_smoothed</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cases_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_cases_per_million]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>total_cases_per_million</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_cases_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_cases_per_million]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_cases_per_million</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_cases_smoothed_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_cases_smoothed_per_million]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_cases_smoothed_per_million</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_deaths_per_million]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>total_deaths_per_million</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_deaths_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_deaths_per_million]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_deaths_per_million</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_deaths_smoothed_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_deaths_smoothed_per_million]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_deaths_smoothed_per_million</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_tests</remote-name>
            <remote-type>129</remote-type>
            <local-name>[new_tests]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_tests</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_tests</remote-name>
            <remote-type>129</remote-type>
            <local-name>[total_tests]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>total_tests</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_tests_per_thousand</remote-name>
            <remote-type>129</remote-type>
            <local-name>[total_tests_per_thousand]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>total_tests_per_thousand</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_tests_per_thousand</remote-name>
            <remote-type>129</remote-type>
            <local-name>[new_tests_per_thousand]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_tests_per_thousand</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_tests_smoothed</remote-name>
            <remote-type>129</remote-type>
            <local-name>[new_tests_smoothed]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_tests_smoothed</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_tests_smoothed_per_thousand</remote-name>
            <remote-type>129</remote-type>
            <local-name>[new_tests_smoothed_per_thousand]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>new_tests_smoothed_per_thousand</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tests_per_case</remote-name>
            <remote-type>129</remote-type>
            <local-name>[tests_per_case]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>tests_per_case</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>positive_rate</remote-name>
            <remote-type>129</remote-type>
            <local-name>[positive_rate]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>positive_rate</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tests_units</remote-name>
            <remote-type>129</remote-type>
            <local-name>[tests_units]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>tests_units</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>stringency_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[stringency_index]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>stringency_index</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population_density</remote-name>
            <remote-type>5</remote-type>
            <local-name>[population_density]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>population_density</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>median_age</remote-name>
            <remote-type>5</remote-type>
            <local-name>[median_age]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>median_age</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>aged_65_older</remote-name>
            <remote-type>5</remote-type>
            <local-name>[aged_65_older]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>aged_65_older</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>aged_70_older</remote-name>
            <remote-type>5</remote-type>
            <local-name>[aged_70_older]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>aged_70_older</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gdp_per_capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[gdp_per_capita]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>gdp_per_capita</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>extreme_poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[extreme_poverty]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>extreme_poverty</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cardiovasc_death_rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[cardiovasc_death_rate]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>cardiovasc_death_rate</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>diabetes_prevalence</remote-name>
            <remote-type>5</remote-type>
            <local-name>[diabetes_prevalence]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>diabetes_prevalence</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>female_smokers</remote-name>
            <remote-type>5</remote-type>
            <local-name>[female_smokers]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>female_smokers</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>male_smokers</remote-name>
            <remote-type>5</remote-type>
            <local-name>[male_smokers]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>male_smokers</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>handwashing_facilities</remote-name>
            <remote-type>5</remote-type>
            <local-name>[handwashing_facilities]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>handwashing_facilities</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hospital_beds_per_thousand</remote-name>
            <remote-type>5</remote-type>
            <local-name>[hospital_beds_per_thousand]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>hospital_beds_per_thousand</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>life_expectancy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[life_expectancy]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>life_expectancy</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>human_development_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[human_development_index]</local-name>
            <parent-name>[owid-covid-data.csv]</parent-name>
            <remote-alias>human_development_index</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <_.fcp.ObjectModelTableType.true...column caption='owid-covid-data.csv' datatype='table' name='[__tableau_internal_object_id__].[owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A]' role='measure' type='quantitative' />
      <column caption='Aged 65 Older' datatype='real' name='[aged_65_older]' role='measure' type='quantitative' />
      <column caption='Aged 70 Older' datatype='real' name='[aged_70_older]' role='measure' type='quantitative' />
      <column caption='Cardiovasc Death Rate' datatype='real' name='[cardiovasc_death_rate]' role='measure' type='quantitative' />
      <column caption='Continent' datatype='string' name='[continent]' role='dimension' type='nominal' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='Diabetes Prevalence' datatype='real' name='[diabetes_prevalence]' role='measure' type='quantitative' />
      <column caption='Extreme Poverty' datatype='real' name='[extreme_poverty]' role='measure' type='quantitative' />
      <column caption='Female Smokers' datatype='real' name='[female_smokers]' role='measure' type='quantitative' />
      <column caption='Gdp Per Capita' datatype='real' name='[gdp_per_capita]' role='measure' type='quantitative' />
      <column caption='Handwashing Facilities' datatype='real' name='[handwashing_facilities]' role='measure' type='quantitative' />
      <column caption='Hospital Beds Per Thousand' datatype='real' name='[hospital_beds_per_thousand]' role='measure' type='quantitative' />
      <column caption='Human Development Index' datatype='real' name='[human_development_index]' role='measure' type='quantitative' />
      <column caption='Iso Code' datatype='string' name='[iso_code]' role='dimension' type='nominal' />
      <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Male Smokers' datatype='real' name='[male_smokers]' role='measure' type='quantitative' />
      <column caption='Median Age' datatype='real' name='[median_age]' role='measure' type='quantitative' />
      <column caption='New Cases' datatype='real' name='[new_cases]' role='measure' type='quantitative' />
      <column caption='New Cases Per Million' datatype='real' name='[new_cases_per_million]' role='measure' type='quantitative' />
      <column caption='New Cases Smoothed' datatype='real' name='[new_cases_smoothed]' role='measure' type='quantitative' />
      <column caption='New Cases Smoothed Per Million' datatype='real' name='[new_cases_smoothed_per_million]' role='measure' type='quantitative' />
      <column caption='New Deaths' datatype='real' name='[new_deaths]' role='measure' type='quantitative' />
      <column caption='New Deaths Per Million' datatype='real' name='[new_deaths_per_million]' role='measure' type='quantitative' />
      <column caption='New Deaths Smoothed' datatype='real' name='[new_deaths_smoothed]' role='measure' type='quantitative' />
      <column caption='New Deaths Smoothed Per Million' datatype='real' name='[new_deaths_smoothed_per_million]' role='measure' type='quantitative' />
      <column caption='New Tests' datatype='string' name='[new_tests]' role='dimension' type='nominal' />
      <column caption='New Tests Per Thousand' datatype='string' name='[new_tests_per_thousand]' role='dimension' type='nominal' />
      <column caption='New Tests Smoothed' datatype='string' name='[new_tests_smoothed]' role='dimension' type='nominal' />
      <column caption='New Tests Smoothed Per Thousand' datatype='string' name='[new_tests_smoothed_per_thousand]' role='dimension' type='nominal' />
      <column caption='Population' datatype='real' name='[population]' role='measure' type='quantitative' />
      <column caption='Population Density' datatype='real' name='[population_density]' role='measure' type='quantitative' />
      <column caption='Positive Rate' datatype='string' name='[positive_rate]' role='dimension' type='nominal' />
      <column caption='Stringency Index' datatype='real' name='[stringency_index]' role='measure' type='quantitative' />
      <column caption='Tests Per Case' datatype='string' name='[tests_per_case]' role='dimension' type='nominal' />
      <column caption='Tests Units' datatype='string' name='[tests_units]' role='dimension' type='nominal' />
      <column caption='Total Cases' datatype='real' name='[total_cases]' role='measure' type='quantitative' />
      <column caption='Total Cases Per Million' datatype='real' name='[total_cases_per_million]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='real' name='[total_deaths]' role='measure' type='quantitative' />
      <column caption='Total Deaths Per Million' datatype='real' name='[total_deaths_per_million]' role='measure' type='quantitative' />
      <column caption='Total Tests' datatype='string' name='[total_tests]' role='dimension' type='nominal' />
      <column caption='Total Tests Per Thousand' datatype='string' name='[total_tests_per_thousand]' role='dimension' type='nominal' />
      <column-instance column='[gdp_per_capita]' derivation='Avg' name='[avg:gdp_per_capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[handwashing_facilities]' derivation='Count' name='[cnt:handwashing_facilities:qk]' pivot='key' type='quantitative' />
      <column-instance column='[hospital_beds_per_thousand]' derivation='Count' name='[cnt:hospital_beds_per_thousand:qk]' pivot='key' type='quantitative' />
      <column-instance column='[gdp_per_capita]' derivation='Max' name='[max:gdp_per_capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[hospital_beds_per_thousand]' derivation='Median' name='[med:hospital_beds_per_thousand:qk]' pivot='key' type='quantitative' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <column-instance column='[gdp_per_capita]' derivation='Sum' name='[sum:gdp_per_capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[handwashing_facilities]' derivation='Sum' name='[sum:handwashing_facilities:qk]' pivot='key' type='quantitative' />
      <column-instance column='[hospital_beds_per_thousand]' derivation='Sum' name='[sum:hospital_beds_per_thousand:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_cases]' derivation='Sum' name='[sum:new_cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_cases_per_million]' derivation='Sum' name='[sum:new_cases_per_million:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_cases_smoothed_per_million]' derivation='Sum' name='[sum:new_cases_smoothed_per_million:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_deaths]' derivation='Sum' name='[sum:new_deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_deaths_per_million]' derivation='Sum' name='[sum:new_deaths_per_million:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_cases]' derivation='Sum' name='[sum:total_cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_cases_per_million]' derivation='Sum' name='[sum:total_cases_per_million:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_deaths_per_million]' derivation='Sum' name='[sum:total_deaths_per_million:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_cases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths_per_million:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_cases:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_cases_per_million:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[cnt:hospital_beds_per_thousand:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[med:hospital_beds_per_thousand:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:hospital_beds_per_thousand:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_cases_per_million:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_cases_smoothed_per_million:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_deaths:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[avg:gdp_per_capita:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[max:gdp_per_capita:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:gdp_per_capita:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[cnt:handwashing_facilities:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:handwashing_facilities:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_deaths_per_million:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bonaire Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United States Virgin Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='alphabetical-order' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='owid-covid-data.csv' id='owid-covid-data.csv_36143DA34F994E4E92F86BB08E6CB15A'>
            <properties context=''>
              <relation connection='textscan.097u17y0rmmo881gqzror05wg1bg' name='owid-covid-data.csv' table='[owid-covid-data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='iso_code' ordinal='0' />
                  <column datatype='string' name='continent' ordinal='1' />
                  <column datatype='string' name='location' ordinal='2' />
                  <column datatype='date' name='date' ordinal='3' />
                  <column datatype='real' name='total_cases' ordinal='4' />
                  <column datatype='real' name='new_cases' ordinal='5' />
                  <column datatype='real' name='new_cases_smoothed' ordinal='6' />
                  <column datatype='real' name='total_deaths' ordinal='7' />
                  <column datatype='real' name='new_deaths' ordinal='8' />
                  <column datatype='real' name='new_deaths_smoothed' ordinal='9' />
                  <column datatype='real' name='total_cases_per_million' ordinal='10' />
                  <column datatype='real' name='new_cases_per_million' ordinal='11' />
                  <column datatype='real' name='new_cases_smoothed_per_million' ordinal='12' />
                  <column datatype='real' name='total_deaths_per_million' ordinal='13' />
                  <column datatype='real' name='new_deaths_per_million' ordinal='14' />
                  <column datatype='real' name='new_deaths_smoothed_per_million' ordinal='15' />
                  <column datatype='string' name='new_tests' ordinal='16' />
                  <column datatype='string' name='total_tests' ordinal='17' />
                  <column datatype='string' name='total_tests_per_thousand' ordinal='18' />
                  <column datatype='string' name='new_tests_per_thousand' ordinal='19' />
                  <column datatype='string' name='new_tests_smoothed' ordinal='20' />
                  <column datatype='string' name='new_tests_smoothed_per_thousand' ordinal='21' />
                  <column datatype='string' name='tests_per_case' ordinal='22' />
                  <column datatype='string' name='positive_rate' ordinal='23' />
                  <column datatype='string' name='tests_units' ordinal='24' />
                  <column datatype='real' name='stringency_index' ordinal='25' />
                  <column datatype='real' name='population' ordinal='26' />
                  <column datatype='real' name='population_density' ordinal='27' />
                  <column datatype='real' name='median_age' ordinal='28' />
                  <column datatype='real' name='aged_65_older' ordinal='29' />
                  <column datatype='real' name='aged_70_older' ordinal='30' />
                  <column datatype='real' name='gdp_per_capita' ordinal='31' />
                  <column datatype='real' name='extreme_poverty' ordinal='32' />
                  <column datatype='real' name='cardiovasc_death_rate' ordinal='33' />
                  <column datatype='real' name='diabetes_prevalence' ordinal='34' />
                  <column datatype='real' name='female_smokers' ordinal='35' />
                  <column datatype='real' name='male_smokers' ordinal='36' />
                  <column datatype='real' name='handwashing_facilities' ordinal='37' />
                  <column datatype='real' name='hospital_beds_per_thousand' ordinal='38' />
                  <column datatype='real' name='life_expectancy' ordinal='39' />
                  <column datatype='real' name='human_development_index' ordinal='40' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='GDP per capita and Facilities'>
      <table>
        <view>
          <datasources>
            <datasource caption='owid-covid-data' name='federated.1bym01b0iougn81c5ygwy1xeqhst' />
          </datasources>
          <datasource-dependencies datasource='federated.1bym01b0iougn81c5ygwy1xeqhst'>
            <column-instance column='[gdp_per_capita]' derivation='Avg' name='[avg:gdp_per_capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[hospital_beds_per_thousand]' derivation='Count' name='[cnt:hospital_beds_per_thousand:qk]' pivot='key' type='quantitative' />
            <column caption='Gdp Per Capita' datatype='real' name='[gdp_per_capita]' role='measure' type='quantitative' />
            <column caption='Handwashing Facilities' datatype='real' name='[handwashing_facilities]' role='measure' type='quantitative' />
            <column caption='Hospital Beds Per Thousand' datatype='real' name='[hospital_beds_per_thousand]' role='measure' type='quantitative' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[handwashing_facilities]' derivation='Sum' name='[sum:handwashing_facilities:qk]' pivot='key' type='quantitative' />
            <column-instance column='[hospital_beds_per_thousand]' derivation='Sum' name='[sum:hospital_beds_per_thousand:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[avg:gdp_per_capita:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:handwashing_facilities:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[cnt:hospital_beds_per_thousand:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[avg:gdp_per_capita:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:handwashing_facilities:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:hospital_beds_per_thousand:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Sri Lanka&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:handwashing_facilities:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:handwashing_facilities:qk]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[avg:gdp_per_capita:qk]' value='C1033%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk] / [federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names])</rows>
        <cols>[federated.1bym01b0iougn81c5ygwy1xeqhst].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{B7CB8F0E-FBF2-46EB-AD13-4BD134202A6C}' />
    </worksheet>
    <worksheet name='India vs Neighbours Covid Cases'>
      <table>
        <view>
          <datasources>
            <datasource caption='owid-covid-data' name='federated.1bym01b0iougn81c5ygwy1xeqhst' />
          </datasources>
          <datasource-dependencies datasource='federated.1bym01b0iougn81c5ygwy1xeqhst'>
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_cases_per_million]' derivation='Sum' name='[sum:total_cases_per_million:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:qk]' pivot='key' type='quantitative' />
            <column caption='Total Cases Per Million' datatype='real' name='[total_cases_per_million]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Sri Lanka&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_cases_per_million:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_cases_per_million:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_cases_per_million:qk]</rows>
        <cols>[federated.1bym01b0iougn81c5ygwy1xeqhst].[tdy:date:qk]</cols>
      </table>
      <simple-id uuid='{36F61769-73DF-482E-8972-AA5CB887C8A5}' />
    </worksheet>
    <worksheet name='Per Million Count'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontname='Tableau Bold'>Per Million Count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='owid-covid-data' name='federated.1bym01b0iougn81c5ygwy1xeqhst' />
          </datasources>
          <datasource-dependencies datasource='federated.1bym01b0iougn81c5ygwy1xeqhst'>
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[life_expectancy]' derivation='Max' name='[max:life_expectancy:qk]' pivot='key' type='quantitative' />
            <column caption='New Cases Per Million' datatype='real' name='[new_cases_per_million]' role='measure' type='quantitative' />
            <column caption='New Deaths Per Million' datatype='real' name='[new_deaths_per_million]' role='measure' type='quantitative' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[new_cases_per_million]' derivation='Sum' name='[sum:new_cases_per_million:qk]' pivot='key' type='quantitative' />
            <column-instance column='[new_deaths_per_million]' derivation='Sum' name='[sum:new_deaths_per_million:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_cases_per_million]' derivation='Sum' name='[sum:total_cases_per_million:qk]' pivot='key' type='quantitative' />
            <column caption='Total Cases Per Million' datatype='real' name='[total_cases_per_million]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_cases_per_million:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths_per_million:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_cases_per_million:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[max:life_expectancy:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_cases_per_million:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths_per_million:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_cases_per_million:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Sri Lanka&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[yr:date:ok]' />
              <groupfilter function='member' level='[yr:date:ok]' member='2019' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[max:life_expectancy:qk]' value='n#,##0.0;(#,##0.0)' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</rows>
        <cols>([federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names] / [federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok])</cols>
      </table>
      <simple-id uuid='{BB8A9FFA-F666-433E-B432-2EDCFB03122C}' />
    </worksheet>
    <worksheet name='Population of India and its neighbours'>
      <table>
        <view>
          <datasources>
            <datasource caption='owid-covid-data' name='federated.1bym01b0iougn81c5ygwy1xeqhst' />
          </datasources>
          <datasource-dependencies datasource='federated.1bym01b0iougn81c5ygwy1xeqhst'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column caption='Population' datatype='real' name='[population]' role='measure' type='quantitative' />
            <column-instance column='[population]' derivation='Sum' name='[sum:population:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Sri Lanka&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' direction='DESC' using='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]' />
          <slices>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='tick-color' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]' value='#000000' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' value='96' />
            <format attr='text-format' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]' value='n#,##0,,M' />
            <format attr='border-style' scope='cols' value='dashed' />
          </style-rule>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]' value='#dfedeb' />
            <format attr='band-color' scope='rows' value='#e9ebe0' />
            <format attr='band-color' scope='cols' value='#efebe8' />
            <format attr='background-color' data-class='total' value='#555555' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]' value='n#,##0,,M' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='band-color' scope='rows' value='#ffffff' />
            <format attr='band-color' scope='cols' value='#00000000' />
            <format attr='border-color' scope='cols' value='#000000' />
            <format attr='border-style' scope='cols' value='solid' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f5f5f5' />
            <format attr='band-size' scope='rows' value='1' />
            <format attr='band-size' scope='cols' value='1' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='line-visibility' scope='cols' value='on' />
            <format attr='line-pattern-only' scope='cols' value='dashed' />
          </style-rule>
          <style-rule element='axis-title'>
            <format attr='color' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]' value='#333333' />
            <format attr='font-family' field='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]' value='Tableau Medium' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]</rows>
        <cols>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</cols>
      </table>
      <simple-id uuid='{C196DF50-44EC-4975-A7C3-AF576A11C3DB}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='owid-covid-data' name='federated.1bym01b0iougn81c5ygwy1xeqhst' />
          </datasources>
          <datasource-dependencies datasource='federated.1bym01b0iougn81c5ygwy1xeqhst'>
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='New Deaths' datatype='real' name='[new_deaths]' role='measure' type='quantitative' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[new_deaths]' derivation='Sum' name='[sum:new_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Week-Trunc' name='[twk:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Sri Lanka&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths:qk]</rows>
        <cols>[federated.1bym01b0iougn81c5ygwy1xeqhst].[twk:date:qk]</cols>
      </table>
      <simple-id uuid='{81490DE2-2721-4058-9C25-D644C178830E}' />
    </worksheet>
    <worksheet name='Total Deaths and Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontname='Tableau Bold'>Per Million Count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='owid-covid-data' name='federated.1bym01b0iougn81c5ygwy1xeqhst' />
          </datasources>
          <datasource-dependencies datasource='federated.1bym01b0iougn81c5ygwy1xeqhst'>
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column caption='New Cases Smoothed Per Million' datatype='real' name='[new_cases_smoothed_per_million]' role='measure' type='quantitative' />
            <column caption='New Deaths Per Million' datatype='real' name='[new_deaths_per_million]' role='measure' type='quantitative' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[new_cases_smoothed_per_million]' derivation='Sum' name='[sum:new_cases_smoothed_per_million:qk]' pivot='key' type='quantitative' />
            <column-instance column='[new_deaths_per_million]' derivation='Sum' name='[sum:new_deaths_per_million:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column caption='Total Deaths' datatype='real' name='[total_deaths]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Year-Trunc' name='[tyr:date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_cases_smoothed_per_million:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:new_deaths_per_million:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Sri Lanka&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_deaths:qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[yr:date:ok]' />
              <groupfilter function='member' level='[yr:date:ok]' member='2019' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:total_deaths:qk]</column>
            <column>[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk] / ([federated.1bym01b0iougn81c5ygwy1xeqhst].[tyr:date:ok] / [federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]))</rows>
        <cols>[federated.1bym01b0iougn81c5ygwy1xeqhst].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{5D8B8872-021B-4435-9F50-88F971C7DFFC}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Covid Cases Comparision in India and its Neighbours.</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='18' w='100000' x='0' y='0'>
          <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98142' id='20' param='vert' w='99034' x='483' y='929'>
            <zone _.fcp.SetMembershipControl.false...type='title' _.fcp.SetMembershipControl.true...type-v2='title' h='5691' id='21' w='99034' x='483' y='929'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='92451' id='9' param='horz' w='99034' x='483' y='6620'>
              <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='91289' id='7' w='88776' x='784' y='7201'>
                <zone h='18048' id='3' name='Population of India and its neighbours' w='44388' x='784' y='80442'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='18048' id='5' name='Per Million Count' w='44388' x='45172' y='80442'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='19770' id='6' name='India vs Neighbours Covid Cases' w='44392' x='45168' y='60672'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='53471' id='13' name='Total Deaths and Cases' w='44392' x='45168' y='7201'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='44357' id='15' name='GDP per capita and Facilities' w='44384' x='784' y='7201'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='28884' id='24' name='Sheet 6' w='44384' x='784' y='51558'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' fixed-size='160' h='91289' id='8' is-fixed='true' param='vert' w='9656' x='89560' y='7201'>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='20557' id='10' name='India vs Neighbours Covid Cases' pane-specification-id='0' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' w='9656' x='89560' y='7201'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='8362' id='14' name='Total Deaths and Cases' pane-specification-id='0' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' w='9656' x='89560' y='27758'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='solid' />
                <format attr='border-width' value='1' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run bold='true'>Covid Cases Comparision in India and its Neighbours.</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1500' minheight='1500' sizing-mode='vscroll' />
          <zones>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='26' w='100000' x='0' y='0'>
              <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98142' id='25' param='vert' w='99034' x='483' y='929'>
                <zone _.fcp.SetMembershipControl.false...type='title' _.fcp.SetMembershipControl.true...type-v2='title' h='5691' id='21' w='99034' x='483' y='929'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='44357' id='15' is-fixed='true' name='GDP per capita and Facilities' w='44384' x='784' y='7201'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='53471' id='13' is-fixed='true' name='Total Deaths and Cases' w='44392' x='45168' y='7201'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='8362' id='14' name='Total Deaths and Cases' pane-specification-id='0' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' w='9656' x='89560' y='27758'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='224' h='28884' id='24' is-fixed='true' name='Sheet 6' w='44384' x='784' y='51558'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='151' h='19770' id='6' is-fixed='true' name='India vs Neighbours Covid Cases' w='44392' x='45168' y='60672'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='20557' id='10' name='India vs Neighbours Covid Cases' pane-specification-id='0' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' w='9656' x='89560' y='7201'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='136' h='18048' id='3' is-fixed='true' name='Population of India and its neighbours' w='44388' x='784' y='80442'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='136' h='18048' id='5' is-fixed='true' name='Per Million Count' w='44388' x='45172' y='80442'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{346448A2-15C1-4A68-BD56-B64B61A52138}' />
    </dashboard>
    <dashboard name='Story 1' type='storyboard'>
      <style>
        <style-rule element='story-point-caption'>
          <format attr='width' value='430' />
        </style-rule>
      </style>
      <size maxheight='964' maxwidth='1016' minheight='964' minwidth='1016' />
      <zones>
        <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='2' w='100000' x='0' y='0'>
          <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98340' id='1' param='vert' removable='false' w='98426' x='787' y='830'>
            <zone _.fcp.SetMembershipControl.false...type='title' _.fcp.SetMembershipControl.true...type-v2='title' h='4357' id='3' w='98426' x='787' y='830' />
            <zone _.fcp.SetMembershipControl.false...type='flipboard-nav' _.fcp.SetMembershipControl.true...type-v2='flipboard-nav' h='10477' id='4' is-fixed='true' paired-zone-id='5' removable='false' w='98426' x='787' y='5187' />
            <zone _.fcp.SetMembershipControl.false...type='flipboard' _.fcp.SetMembershipControl.true...type-v2='flipboard' h='83506' id='5' paired-zone-id='4' removable='false' w='98426' x='787' y='15664'>
              <flipboard active-id='1' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='GDP per Capita Income and facilities available for Covid' captured-sheet='GDP per capita and Facilities' id='1' />
                  <story-point caption='Total Deaths and Cases' captured-sheet='Total Deaths and Cases' id='2' />
                  <story-point caption='Population of India and its neighbours' captured-sheet='Population of India and its neighbours' id='3' />
                  <story-point caption='India vs Neighbours Covid Cases' captured-sheet='India vs Neighbours Covid Cases' id='4' />
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <simple-id uuid='{1A9D3DBC-F869-448A-9296-D744E5CF3A23}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Population of India and its neighbours'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.1bym01b0iougn81c5ygwy1xeqhst].[sum:population:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F0EEDC1D-D98B-4E5E-A9C9-EFD35CDB60D8}' />
    </window>
    <window class='worksheet' name='Per Million Count'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:new_tests:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:new_tests_per_thousand:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:positive_rate:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{362ED1D5-08B0-40BC-ABCD-003B39E70FB8}' />
    </window>
    <window class='worksheet' name='India vs Neighbours Covid Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[tdy:date:qk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1FE356EB-3550-44C3-8E18-8A0A624CCC2D}' />
    </window>
    <window class='worksheet' name='Total Deaths and Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:new_tests:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:new_tests_per_thousand:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:positive_rate:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[tyr:date:ok]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{21741103-11D4-4208-9F8B-0BC61EF5F176}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='GDP per capita and Facilities'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='India vs Neighbours Covid Cases'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Per Million Count'>
          <zoom type='fit-width' />
        </viewpoint>
        <viewpoint name='Population of India and its neighbours'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 6'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Total Deaths and Cases'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{636DAEE4-BE10-4CC4-9A98-6F0137F474AC}' />
    </window>
    <window class='dashboard' name='Story 1'>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{FFF6BEA4-BC7F-4028-B3D9-D341A0383B5C}' />
    </window>
    <window class='worksheet' name='GDP per capita and Facilities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7087A7C0-885E-494A-BF57-C6C3E285F818}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[none:location:nk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[twk:date:qk]</field>
            <field>[federated.1bym01b0iougn81c5ygwy1xeqhst].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9A9F8DC3-FE14-42C5-A990-7A242845508D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      SE9Pz6bb/j/Yvtr7TcJM/wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='GDP per capita and Facilities' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='India vs Neighbours Covid Cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Per Million Count' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Population of India and its neighbours' width='192'>
      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
      /wOf85wwj8LbjAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Story 1' width='192'>
      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
      mez1ZRx6/hsr2Lw3uUHbMwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Total Deaths and Cases' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
